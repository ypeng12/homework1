What is the difference between a merge and a rebase?

Both merge and rebase are ways to integrate changes from one branch into another in a version control system like Git. 
However, they differ in how they apply those changes and how they affect the branch history.

Merge: Merging creates a new commit that combines the changes from one branch into another branch. When you merge, 
Git creates a new "merge commit" that has two parent commits, one from each branch being merged. This preserves the 
commit history of both branches, making it easy to see when and where changes were made. Merging is a good option for
integrating branches with parallel development or when you want to keep a branch history more clearly separated.

Rebase: Rebasing integrates changes from one branch into another by moving the commits of one branch to sit on top
of the commits of the other branch. This effectively rewrites the branch history, making it appear as if the changes
were made directly on top of the other branch. Rebasing can create a cleaner, more linear history that is easier to 
understand, but it can also be more complex to manage, especially when multiple developers are working on the same branch.

In summary, merge preserves branch history and is easier to manage, while rebase creates a cleaner history but can 
be more complex to manage. The choice of which method to use depends on the specific situation and development workflow.

What is a remote repository?

A remote repository is a version control repository that is hosted on a server and accessed over a network by developers and collaborators. 
This repository can be located on a cloud-based platform such as GitHub, GitLab, or Bitbucket, or on a private server.
Developers can clone or download the contents of the remote repository to their local machine, make changes to the code, 
and then push those changes back to the remote repository for others to access and review.


